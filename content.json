[{"title":"曾经自建博客的回忆","date":"2023-04-09T15:30:59.000Z","path":"2023/04/09/Hexo笔记/博客手册/","text":"自毕业以来，尝试过各种基于markdown格式自建博客的搭建，不同的技术实现的博客主题不同，不同的主题又各自有它们独有的优势，所以都记录了下来。后来在发布博文的时候，因为技术实现不同，所以需要的环境不同导致无法快速发布文件，所以在这进行记录。 一、基于GitBook实现1.1 简述GitBook网站是一个简单的个人在线书籍网站，在这里可以把自己的文档整理成书籍发布出来，便于阅读。 博客主页：https://iswxw.github.io/GitBookWeb/ 博客源码：https://github.com/iswxw/GitBookWeb 1.2 环境准备12345678910111213# 安装gitbook,安装失败可以尝试+ --force 即：npm install gitbook -g --force$npm install gitbook -g# 安装失败可以尝试+ --force 即：npm install -g gitbook-cli --force$npm install -g gitbook-cli --- 如果没有安装gitbook,此命令会默认同时安装 GitBook$gitbook -V--- 列出本地所有的gitbook版本$gitbook ls# 安装插件$gitbook install 1.3 使用指南运行和发布 123456789101112$gitbook init # 初始化一本书,如果已有，不必执行$gitbook serve # 本地启动服务查看效果$gitbook build # 打包文档# 运行gitbook&amp;发布$sh deploy.sh## push源代码$git add .$git commit - m &quot;提交内容注释&quot;$git push 1.4 附件材料 gitbook出现if (args[ii] &#x3D;&#x3D; null) throw missingRequiredArg(ii 解决 二、基于readthedocs实现1.1 简述首先说一下这款博客的一个发布流程： Sphinx+GitHub+ReadtheDocs 作为一个文档写作工具，利用pandoc文本转换，用Sphinx生成文档，GitHub托管文档，再导入到ReadtheDocs。我们可以使用这个工具写文档、记笔记等。 Read the Docs是一个在线文档托管系统， 你可以从各种版本控制系统中导入文档，如果你使用webhooks，那么每次提交代码后可以自动构建并上传至readthedocs网站，非常方便。 Sphinx 是一个基于Python的文档生成项目，最早只是用来生成 Python 官方文档，随着工具的完善， 越来越多的知名的项目也用他来生成文档，甚至完全可以用他来写书采用了reStructuredText作为文档写作语言, 不过也可以通过模块支持其他格式，待会我会介绍怎样支持MarkDown格式。 博客主页： 《Go深入浅出》：https://go.iswxw.com/ 《Pyhthon 深入浅出》：https://python.iswxw.com/ 《PHP 深入浅出》：https://php.iswxw.com/ 博客源码： https://github.com/iswxw/wxw-go https://github.com/iswxw/wxw-python https://github.com/iswxw/wxw-php 1.2 环境准备 环境安装是在有python环境的前提下进行。 安装sphinx 1pip install sphinx sphinx-autobuild sphinx_rtd_theme 这一步时间会安装很多python依赖，耐心等等.. 安装指南 https://www.sphinx-doc.org/en/master/usage/installation.html 1.3 使用指南（1）本地文本编写 初始化 12345# 创建文档根目录mkdir -p /root/work/wxw-gocd wxw-go/# 可以回车按默认配置来写sphinx-quickstart 下面是我填写的，其他基本上默认即可： 123456&gt; Separate source and build directories (y/n) [n]:y&gt; Project name: wxw-go&gt; Author name(s): iswxw&gt; Project version []: 0.2&gt; Project release [1.0]: 0.2.2&gt; Project language [en]: zh_CN 安装软件tree查看目录树结构： 1yum install tree 然后运行 tree -C . 查看生成的sphinx结构: 123456789.├── build├── make.bat├── Makefile└── source ├── conf.py ├── index.rst ├── _static └── _templates 添加一篇文章，在source目录下新建hello.rst，内容如下: 12hello,world============= index.rst 修改如下: 12345Contents:.. toctree:: :maxdepth: 2 hello 更改主题 sphinx_rtd_theme 更改source&#x2F;conf.py: 123import sphinx_rtd_themehtml_theme = &quot;sphinx_rtd_theme&quot;html_theme_path = [sphinx_rtd_theme.get_html_theme_path()] 然后在更目录执行 make html，进入 build/html目录后用浏览器打开 index.html toctree 支持多级目录 比如要想将python.rst,java.rst笔记在不同的目录,toctree这样设置: 123456Contents:.. toctree:: python/python swift/swift 注意中间的空行 支持markdown编写 通过recommonmark 来支持markdown 1pip install recommonmark 然后更改conf.py: 12345from recommonmark.parser import CommonMarkParsersource_parsers = &#123; &#x27;.md&#x27;: CommonMarkParser,&#125;source_suffix = [&#x27;.rst&#x27;, &#x27;.md&#x27;] 如果想使用高级功能，可以添加AutoStructify配置，在 conf.py中添加: 1234567891011# At top on conf.py (with other import statements)import recommonmarkfrom recommonmark.transform import AutoStructify# At the bottom of conf.pydef setup(app): app.add_config_value(&#x27;recommonmark_config&#x27;, &#123; &#x27;url_resolver&#x27;: lambda url: github_doc_root + url, &#x27;auto_toc_tree_section&#x27;: &#x27;Contents&#x27;, &#125;, True) app.add_transform(AutoStructify) 网上有个详细配置: https://github.com/rtfd/recommonmark/blob/master/docs/conf.py 然后修改刚刚的 hello.rst，改用熟悉的 hello.md编写: 1234## hello world### test markdown 再次运行 make html后看效果，跟前面一样。 （2）GitHub托管 一般的做法是将文档托管到版本控制系统比如github上面，push源码后自动构建发布到readthedoc上面， 这样既有版本控制好处，又能自动发布到readthedoc，实在是太方便了。 先在GitHub创建一个仓库名字叫wxw-go， 然后在本地.gitignore文件中添加 build/目录，初始化git，commit后，添加远程仓库。 具体几个步骤非常简单，参考官方文档：https://github.com/rtfd/readthedocs.org: 在Read the Docs上面注册一个账号 登陆后点击 “Import”. 给该文档项目填写一个名字比如 “wxw-go”, 并添加你在GitHub上面的工程HTTPS链接, 选择仓库类型为Git 其他项目根据自己的需要填写后点击 “Create”，创建完后会自动去激活Webhooks，不用再去GitHub设置 一切搞定，从此只要你往这个仓库push代码，readthedoc上面的文档就会自动更新. 注：在创建read the docs项目时候，语言选择”Simplified Chinese” 1.4 附件材料 readthedoc官方教程 三、基于vuepress实现1.1 简述我相信每一个程序员入门时，都经历过搭建一个个人博客这样的阶段。确实这是一个好的练手项目，而搭建博客难度也可高可低，取决于个人目标。本文提供了一个选择，可基于 GitHub 的 GitHub Pages 功能 和 Vuepress 框架快速地搭建免费的markdown博客：对于文档编写者来说，能更专注于写文章；对于文档开发者来说，一切皆Vue组件，能方便地自定义主题。 博客主页：https://iswxw.github.io/HomeWeb/ 博客源码：https://github.com/iswxw/HomeWeb 1.2 环境准备 前提是环境依赖于node.js以及npm包管理工具。 构建基本目录结构 新建一个名为 blog-demo 的文件夹，命令行进入到该文件夹目录，输入命令： 12# 按默认配置初始化一个项目，此时会在当前目录下生成 package.json 文件npm init -y 将 VuePress 作为一个本地依赖安装 1npm install -D vuepress 在 package.json 里的 scripts 中添加如下代码，不需要修改其它代码 123456&#123; &quot;scripts&quot;: &#123; &quot;docs:dev&quot;: &quot;vuepress dev docs&quot;, &quot;docs:build&quot;: &quot;vuepress build docs&quot; &#125;&#125; 在项目根目录下，新建 docs 文件夹 1mkdir docs 新建一个 markdown 文件1echo &#x27;# Hello VuePress!&#x27; &gt; docs/README.md 输入命令启动项目，在浏览器中访问 http://localhost:8080/ 即可预览效果 1npm run docs:dev 1.3 使用指南 基本配置 现在我们已经构建出了最基本的项目结构，并且可以在浏览器中预览到 docs 目录下的 README.md 文件的效果，该文件即是我们网站的首页，如图所示： 然而如果没有任何配置，用户将无法在网站上自由导航。因此，为了更好地自定义我们的网站，我们接着在 docs 目录下新建 .vuepress 文件夹，执行命令如下： 12# 新建 .vuepress 文件夹mkdir docs\\.vuepress 接着在 .vuepress 文件夹下新建 config.js 文件,这里的 config.js 便是一个 Vuepress 网站必要的配置文件，在其中添加如下代码： 12345module.exports = &#123; base: &#x27;/blog-demo/&#x27;, title: &#x27;blog-demo&#x27;, description: &#x27;Vuepress blog demo&#x27;&#125; 其中配置项的含义为： base：站点的基础路径，它的值应当总是以斜杠开始，并以斜杠结束。这里设置为 &#x2F;blog-demo&#x2F; ，我们再次在本地运行项目，访问路径就需要变更为 http://localhost:8080/blog-demo/ title：网站的标题 description：网站的描述 默认主题配置 Vuepress 提供了一个默认主题，让我们不必自己去从零实现复杂的 markdown 文件渲染、目录结构等，直接按照规则去使用它即可。如果你想自定义自己的主题，请查看官方文档：Vuepress-开发主题。 首页配置 默认主题提供了一个首页的布局，想要使用它，需要在你的根级 README.md 以格式 YAML front matter 指定 home: true。因此，将我们最初创建的 README.md 修改一下： 12345678910111213home: trueheroImage: /vue-logo.pngheroText: blog-demotagline: 博客示例actionText: 快速上手 →actionLink: /features:- title: 简洁至上 details: 以 Markdown 为中心的项目结构，以最少的配置帮助你专注于写作。- title: Vue驱动 details: 享受 Vue + webpack 的开发体验，在 Markdown 中使用 Vue 组件，同时可以使用 Vue 来开发自定义主题。- title: 高性能 details: VuePress 为每个页面预渲染生成静态的 HTML，同时在页面被加载的时候，将作为 SPA 运行。 heroImage: 首页图片，图片放置在 .vupress&#x2F;public 文件夹下，若没有该文件夹则自己创建一个，保存一张你想要的首页图片，并在此处引用。 其它参数请参考官方文档：Vuepress-默认主题首页 导航栏 导航栏可能包含你的页面标题、搜索框、 导航栏链接、多语言切换、仓库链接，它们均取决于你的配置。在 .vupress&#x2F;config.js 文件添加一些导航栏链接： 123456789101112module.exports = &#123; themeConfig: &#123; // 你的GitHub仓库，请正确填写 repo: &#x27;https://github.com/xxxxxxx/blog-demo&#x27;, // 自定义仓库链接文字。 repoLabel: &#x27;My GitHub&#x27;, nav: [ &#123; text: &#x27;Home&#x27;, link: &#x27;/&#x27; &#125;, &#123; text: &#x27;FirstBlog&#x27;, link: &#x27;/blog/FirstBlog.md&#x27; &#125; ] &#125;&#125; 接着，我们在 docs 目录下新建 blog 文件夹，在 blog 目录下创建 &#x2F;blog&#x2F;FirstBlog.md 作为我们第一篇博客的内容： 123# 我的第一篇博客My First Blog 我们再在项目根目录，即 blog-demo 下，输入命令 npm run docs:dev ，浏览器中访问 http://localhost:8080/blog-demo/ 查看页面效果，点击页面右上角的FirstBlog 可以看到我们第一篇博客： 侧边栏 最后我们配置侧边栏，让用户体验更好一些，在 .vupress&#x2F;config.js 文件添加一些代码： 12345678module.exports = &#123; themeConfig: &#123; sidebar: [ [&#x27;/&#x27;, &#x27;首页&#x27;], [&#x27;/blog/FirstBlog.md&#x27;, &#x27;我的第一篇博客&#x27;] ] &#125;&#125; 本地预览 至此我们已经完成了一个最简单的博客，再次运行项目，点击首页的按钮 快速上手 ，我们可以看到： 部署 最后一步，我们需要将代码部署到GitHub Pages，具体请参照文档：Vupress-部署。 （1）首先确定你的项目是否满足以下条件： 文档放置在项目的 docs 目录中 使用的是默认的构建输出位置 VuePress 以本地依赖的形式被安装到你的项目中，在根目录的 package.json文件中有如下两段代码： 12345678910// 配置npm scripts&quot;scripts&quot;: &#123; &quot;docs:dev&quot;: &quot;vuepress dev docs&quot;, &quot;docs:build&quot;: &quot;vuepress build docs&quot; &#125;// VuePress 以本地依赖的形式被安装&quot;devDependencies&quot;: &#123; &quot;vuepress&quot;: &quot;^0.14.8&quot;&#125; （2）在github上创建一个名为 blog-demo 的仓库，并将你的代码提交到github上。如果你对git不熟悉，请先阅读：Git教程-廖雪峰的官方网站 （3）在 docs&#x2F;.vuepress&#x2F;config.js 文件中设置正确的 base。 如果打算发布到 https:&#x2F;&#x2F;.github.io&#x2F;&#x2F;（也就是说你的仓库在 https://github.com/&#x2F;），则将 base 设置为 &#x2F;&#x2F;，此处我设置为 &#x2F;blog-demo&#x2F; 。 （4）在项目根目录中，创建一个如下的 deploy.sh 脚本文件，请自行修改github仓库地址 12345678910111213141516171819#!/usr/bin/env sh# 确保脚本抛出遇到的错误set -e# 生成静态文件npm run docs:build# 进入生成的文件夹cd docs/.vuepress/distgit initgit add -Agit commit -m &#x27;deploy&#x27;# 如果发布到 https://&lt;USERNAME&gt;.github.io/&lt;REPO&gt;git push -f git@github.com:&lt;USERNAME&gt;/&lt;REPO&gt;.git master:gh-pagescd - （5）双击 deploy.sh 运行脚本，会自动在我们的 GitHub 仓库中，创建一个名为 gh-pages 的分支，而我们要部署到 GitHub Pages 的正是这个分支。 （6）这是最后一步了，在 GitHub 项目点击 Setting 按钮，找到 GitHub Pages - Source，选择 gh-pages 分支，点击 Save 按钮后，静静地等待它部署完成即可。 部署效果预览：https://github.com/iswxw/HomeWeb GitHub仓库地址：https://iswxw.github.io/HomeWeb/notes/guide/ 1.4 附件材料 vuepress官方文档 node.js npm 四、基于docsify实现1.1 简述docsify 是一个神奇的文档网站生成器。它可以快速帮你生成文档网站。不同于 GitBook、Hexo 的地方是它不会生成静态的 .html 文件，所有转换工作都是在运行时。如果你想要开始使用它，只需要创建一个 index.html 就可以开始编写文档。 博客主页：https://iswxw.github.io/wxw-document/ 博客源码：https://github.com/iswxw/wxw-document 1.2 环境准备安装docsify-cli之前，我们需要安装npm包管理器，而安装了node.js就会自动安装npm。 推荐全局安装 docsify-cli 工具，可以方便地创建及在本地预览生成的文档。 12#用npm安装全局工具npm i docsify-cli -g 1.3 使用指南 初始化项目 如果想在项目的 . 当前目录里写文档，直接通过 init 初始化项目 1docsify init . 初始化成功后，可以看到 . 目录下创建的几个文件 index.html 入口文件 README.md 会做为主页内容渲染 .nojekyll 用于阻止 GitHub Pages 忽略掉下划线开头的文件 如果不喜欢 npm 或者觉得安装工具太麻烦，我们可以直接手动创建一个 index.html 文件 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.jsdelivr.net/npm/docsify/themes/vue.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script&gt; window.$docsify = &#123; //... &#125; &lt;/script&gt; &lt;script src=&quot;//cdn.jsdelivr.net/npm/docsify/lib/docsify.min.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 本地预览 通过运行 docsify serve . 启动一个本地服务器，这里的点就是当前目录的意思，可以方便地实时预览效果。默认访问地址 http://localhost:3000 。也可以用-p指定端口。 1docsify serve -p 80 . Loading 提示 初始化时会显示 Loading… 内容，你可以自定义提示信息。直接修改index.html文件。 1&lt;div id=&quot;app&quot;&gt;加载中&lt;/div&gt; 如果更改了 el 的配置，需要将该元素加上 data-app 属性。 123456789&lt;!-- index.html --&gt; &lt;div data-app id=&quot;main&quot;&gt;加载中&lt;/div&gt; &lt;script&gt; window.$docsify = &#123; el: &#x27;#main&#x27; &#125; &lt;/script&gt; 更多详细的配置可以参见官网 docsify。 1.4 附件材料 https://docsify.js.org/#/?id=docsify 工具docsify详解 五、基于hexo实现1.1 简述Hexo 是基于NodeJs的静态博客框架，简单、轻量，它生成的静态站点可以托管在Github和Gitee上。Hexo还支持MarkDown语法，是很多程序猿的福音，它可以一键部署，支持超多插件，拥有超多主题，是个不错的选择。 博客主页：https://iswxw.github.io/博客源码：https://github.com/iswxw/iswxw.github.io 1.2 环境准备因为hexo是基于NodeJs的，所以需要安装NodeJs。 去NodeJs官网下载长期支持版，然后打开安装程序，安装选项全部默认，一路点击Next。安装好了之后，打开cmd输入node -v，如果显示的是下载的版本号那就是安装成功了。 安装hexo 1npm install -g hexo-cli 安装好了以后输入hexo -v 检查安装，如果输出的是一堆版本号那就安装成功了。 详细安装教程参见 hexo官网 1.3 使用指南安装好后,初始化博客目录 输入 hexo init blog 初始化文件夹 接着输入cd blog将目录切换到blog文件夹里 然后输入npm install就会在文件夹里生成一些需要的文件。 这样就配置好了，可以输入hexo g生成静态网页，然后输入hexo s打开本地服务器来查看网页， 相关指令说明： 12345678npm install hexo-cli -g // 安装hexohexo init iswxw // 初始化博客目录： cd iswxw // 初始化完成后，我们就进入我们的目录npm install // 安装 依赖包hexo clean // 清除缓存文件 (db.json) 和已生成的静态文件 (public)hexo g // 生成静态页面 hexo s // 把你的网站本地运行起来hexo d // 发布服务到指定的服务器 项目维护 项目预览 12345678# 1. 请求历史文件hexo clean# 2. 生成静态页面hexo g# 3. 发布本地服务hexo s 项目发布 1234567891011# 1. 请求历史文件hexo clean# 2. 生成静态页面hexo g# 3. 发布 到码云 https://gitee.com/iswxw/iswxw.githexo d # 4. push 到指定仓库git push git@github.com:iswxw/iswxw.github.io.git main 1.4 附件材料 hexo官网 node.js npm","comments":true,"link":"","permalink":"http://iswxw.github.io/2023/04/09/Hexo%E7%AC%94%E8%AE%B0/%E5%8D%9A%E5%AE%A2%E6%89%8B%E5%86%8C/","categories":[{"name":"我的博客","slug":"我的博客","permalink":"http://iswxw.github.io/categories/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"入门","slug":"入门","permalink":"http://iswxw.github.io/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"谈谈技术能力","date":"2022-11-26T04:12:57.000Z","path":"2022/11/26/tech_thinking/1.谈谈技术能力/","text":"1. 技术人成长的悖论在程序员界有一个悖论持续在困惑着很多技术人：在写代码的人的困惑是一直写代码是不是会丧失竞争力，会不会被后面年轻的更能加班写代码的人汰换。典型代表就是工作 5 年左右的核心技术骨干，此时正处于编码正嗨但也开始着手规划下一个职业发展阶段的时候；没在写代码的人困惑是我长时间不写代码（或者代码量较少）我的技术功底是不是在退化，我在市场上还会有竞争力吗，我的发展空间是不是被限制住了。典型代表就是带业务项目的架构师或者团队 Team Leader，他们更多的精力是在业务需求理解和拆分，团队事务的管理上。 这种围城现象非常严重，是技术人在职业发展过程中必定会面临的困境。但要回答清楚这个问题，其根源不在于是写不写代码或者代码量的多少，其本质还是要回到什么叫技术能力以及如何提升技术能力这个根节点上来。我把我的一些观察和思考总结下来，供大家参考。 2. 到底什么是技术能力要解释清楚什么是技术能力还得看透技术能力的本质，从源头上来做剖析。挑选几个程序员日常的工作问题来做个剖析比对，从我们的日常感观中来辨识下哪些是有技术能力的做法，哪些是没啥技术能力的做法。 2.1 两类日常工作 重复琐碎类工作 有一类工作是专门处理其他组技术同学对组内业务的疑惑进行解答，我们称之为 daily 支持。比如咨询你负责的系统在开发环境有一个报错影响了他们的项目联调是什么原因。这种工作的典型特征就是，随时都可能有人来问你问题，还有可能是同一个问题不同的人来问你很多遍。这类工作称归纳为重复&#x2F;琐碎类工作。这类工作我们来看看几种做法： 就事论事，把这个问题回答了结束。到这个程度你只是解决了一个具体的问题。很可惜我们很多技术同学都是处于这个层次。 解答完这个问题后即整理成文档，把排查步骤写清楚，提升自己和同组人的工作效率。到这个程度说明你看到并解决了内部效率问题。 将此排查问题的方法和逻辑固化为小工具给到咨询的同学去用，让他以后可以自助排查解决，这样既解决了别人的问题也彻底释放了自己和同组人的效能。到这个程度说明你重新定义了效能问题并找到更好提效的办法。 将此问题背后根因找到，从业务原理或者产品功能上去找解法。将技术工具抽象为业务功能的完善。到这个程度说明你已经从单纯的技术提效看到了架构合理性问题，并尝试在业务上寻求彻底根治的办法。 这四种不同的做法我们可以看出来，即使是这些重复的琐碎类工作，我们也可以从扩大受益面的角度去提炼价值，然后寻求多个层次的解法。在解决问题的过程中自然而然也锻炼了自己多层次的思考和抽象能力。 抽象复杂类工作 还有一类工作是相对抽象和复杂的工作，它的典型特质就是需要只能感受到现象，很难找到根因，没有明确目标和固定解法，需要自己做方案定策略。举个实际中遇到的例子，就是在复杂的系统链路中往往会出现联调效率十分低下的问题，每个研发同学都在抱怨各种各样的问题，但就是没法去根治。面对这样的复杂抽象问题，也有好几种做法： 找到抱怨的同学，问一问具体的问题是什么，然后针对性解决。 更加广泛收集问题，然后列出来表格，归类分析并安排负责人跟进解决，最后定期跟踪进度。 深入分析表格的中的问题并对问题进行抽象，从架构调优和产品功能的角度去寻找原因，并寻找解决这些问题带来的业务价值，并确定目标拆解路径，最后按照任务推进和跟踪进展。 从更全局角度去思考此目标与年度目标的关系，与组织发展的关系，思考如何扩大此事的效益，思考如何通过这些事的解决锻炼和培养团队同学。 可以看出来这种抽象复杂的工作，其实也有多种做法，看得更加细致是可以看到技术架构的调优，看得有深度可以与目标、组织成长结合在一起。当然也有很一般的做法，那就是纯粹单个问题解决，纯粹是变成项目经理，通过任务列表跟踪进度。 2.2 技术能力层次模型通过上面两类日常工作的分析，我们很明显可以看到有技术能力的做法特征是能够通过现象看到本质，并能够通过对问题的抽象归纳进行技术架构层调优以解决同类问题。 因此我对技术能力的定义是：技术能力是一种以解决某种问题为目标的思路、方法与执行手段，其本质就是解决问题的能力。在编程领域，就是对遇到的业务问题进行抽象、提炼以及逻辑的构建，通过研发工具以提升解决问题的效能，减低人工低效的重复工作。 如果用技术能力这个定义的方法论对“什么是技术能力”进行剖析，我提炼了一些模型来表达。 这个能力模型按照逐步进阶阶段分为了三层： 术，硬核技术能力 术这个层面其实更多是硬核技术能力，基本上就是技术的基础功底（如计算机基础，分布式技术，质量意识等）。虽然这个归为是基础类，但这也是技术人的立身之本。工作 3-5 年的同学基本上都还是处于这个阶段，即需要大量的练习使得自己的技能非常娴熟。 处在这个阶段最重要的就是需要有技术好奇心，要有技术的专研力，通过时间的磨炼持久去学习去练习，使得自己能够成为团队的核心骨干力量。 法，技术架构能力 法这个层面其实更多的是技术架构能力，即通过现象看透本质，通过模型、原则来表达本质以解决抽象复杂类问题。这是一种高阶的技术架构思维，基本上 5-10 年的同学会处在这个阶段。这个阶段更多强调问题发现，问题定义，问题分析，问题解决的能力。 处在这个阶段是需要很强大的认知能力提升，这里必备的素质就是皮实和包容，要容得下不同的观点也要经得起各种挑战。但这个阶段也有很大的误区，即非常容易被简化为就是要学习很多方法论或者套路。 道，技术领导能力 道这个层面其实更多的是技术领导力，即通过技术影响力去寻找愿景和目标，带领组织来去得战略结果。在这个阶段我们要基于深厚的技术架构能力和技术硬核能力。通过技术思维去解决超越纯技术领域的问题，一般来说 10+年的同学会遇到这类问题。这个阶段的成长也会更多面临人的底层素质能力升级，需要更多靠领悟而不是纯粹的训练和问题驱动的思考。这个阶段其实也有很大的误区，即很多人只学到了表面功夫而没有深得要领，纯粹就变成是对己就是自我修养的提升，对别人就是 PUA。 2.3 如何提升技术能力 随着把技术能力层次模型定义出来，其实如何提升也有了一定指南。后续有机会可以分章节来论述这个技术能力的提升过程。但产出详细章节的实践论述前，还有一篇“内功心法”可以分享给大家： 寻找成长的源动力 大家往往对这个问题不以为意，觉得成长是每个人都想要的，但是大家没有仔细琢磨过促进你成长的到底是什么：是你自驱想要享受这个练、思、悟的过程 还是 因为渴望得到周边人的认可&#x2F;反馈&#x2F;评价。这两者在你顺利的时候可能没什么感觉，但当你面对晋升失败，项目不利等挫折的时候就会有非常大的差异。 如果你能够找到自己成长的源动力，那么在遇到真正的困难和迷茫时候才能够摆正好自己的心态，寻找突破口，让自己走出困境，得到长足的成长。 常态化的总结和反思 不管是编码类的技术基础学习成长，还是相对抽象的问题解决，还是技术领导力成长。只要是成长，只要能够抓住这两个关键就一定能够成功。 第一个就是反思，能够敏锐地反思自己的不足，然后不断去修正自己的心态和行为让自己蜕变。 第二个就是总结，总结的过程是不断梳理自己的过程，把自己迷迷糊糊，似是而非的东西分类归类，而且总结越多就能够用好时间的复利，就能够越促进成长。 找到了源动力就解决了底层动机问题，通过总结和反思是能够利用上时间的复利，通过这两样心法就能够使得自己成为一个能够不断丰富完善自己的人，达到这样的状态必定能够成为技术强人。 实用技巧 要做到常态化的总结与反思，最简单的技巧就是写文章，通过文字的整理可以让自己的思考更加成熟，想得更加成熟以后自然而然对外就能够讲得更加清楚，能够对外讲清楚就能够更好分享交流才能够真正去校正自己的想法是不是正确。所以我提了，以写代想，以想促讲，以讲验真的实用技巧。 文章来源：谈谈技术能力","comments":true,"link":"","permalink":"http://iswxw.github.io/2022/11/26/tech_thinking/1.%E8%B0%88%E8%B0%88%E6%8A%80%E6%9C%AF%E8%83%BD%E5%8A%9B/","categories":[{"name":"技术篇","slug":"技术篇","permalink":"http://iswxw.github.io/categories/%E6%8A%80%E6%9C%AF%E7%AF%87/"}],"tags":[{"name":"成长思考","slug":"成长思考","permalink":"http://iswxw.github.io/tags/%E6%88%90%E9%95%BF%E6%80%9D%E8%80%83/"}]},{"title":"Hello World","date":"2021-05-26T04:12:57.000Z","path":"2021/05/26/Hexo笔记/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","comments":true,"link":"","permalink":"http://iswxw.github.io/2021/05/26/Hexo%E7%AC%94%E8%AE%B0/hello-world/","categories":[{"name":"我的博客","slug":"我的博客","permalink":"http://iswxw.github.io/categories/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"入门","slug":"入门","permalink":"http://iswxw.github.io/tags/%E5%85%A5%E9%97%A8/"}]},{"title":"发布后样式加载不出来的问题","date":"2018-05-26T04:12:57.000Z","path":"2018/05/26/Hexo笔记/静态样式加载不出来/","text":"使用hexo+github pages搭建个人博客，在本地服务器没有任何问题，但是在外网访问页面样式加载不出来。 因为需要修改_CONFIG.YML文件中的网址和网站根目录 123456789bash: # URL&lt;br&gt; ## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and &lt;br&gt;root as &#x27;/child/&#x27;&lt;br&gt; url: https://banjingwei.github.io/ban.github.io&lt;br&gt; root: /ban.github.io/&lt;br&gt; permalink: :year/:month/:day/:title/&lt;br&gt; permalink_defaults:&lt;br&gt; More info: 提示内容如下： 如果您的网站存放在子目录中，例如 HTTP:&#x2F;&#x2F;YOURSITE.COM&#x2F;BLOG，则请将您的 URL 设为 &lt;br&gt;HTTP://YOURSITE.COM/BLOG 并把 ROOT 设为 &#x2F;BLOG&#x2F;。 使用GITHUB PAGES搭建博客，网址就是：1$ https://github.com/iswxw/iswxw.github.io 也就是GITHUB PAGES分配给我们的网址根目录：&#x2F;iswxw.github.io&#x2F;是搭建博客仓库的名称 root: /iswxw.github.io/ Deploy to remote sites1$ hexo deploy","comments":true,"link":"","permalink":"http://iswxw.github.io/2018/05/26/Hexo%E7%AC%94%E8%AE%B0/%E9%9D%99%E6%80%81%E6%A0%B7%E5%BC%8F%E5%8A%A0%E8%BD%BD%E4%B8%8D%E5%87%BA%E6%9D%A5/","categories":[{"name":"我的博客","slug":"我的博客","permalink":"http://iswxw.github.io/categories/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"入门","slug":"入门","permalink":"http://iswxw.github.io/tags/%E5%85%A5%E9%97%A8/"}]}]